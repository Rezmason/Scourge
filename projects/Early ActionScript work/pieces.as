// CLOCKWISEconst ORIGIN_X:int = 1, ORIGIN_Y:int = 1;const ONE:Array = [[0, 0, ]];const TWO:Array = [[0, 0, 0, 1, ], [0, 0, 1, 0, ]];const THREE_STRAIGHT:Array = [[0, 0, 0, 1, 0, 2, ], [0, 0, 1, 0, 2, 0, ]];const THREE_BENT:Array = [[0, 0, 0, 1, 1, 0, ], [0, 0, 0, 1, 1, 1, ], [0, 1, 1, 0, 1, 1, ], [0, 0, 1, 0, 1, 1, ]];const I:Array = [[0, 0, 1, 0, 2, 0, 3, 0, ], [0, 0, 0, 1, 0, 2, 0, 3, ]];const L:Array = [[0, 0, 1, 0, 2, 0, 2, 1, ], [0, 0, 0, 1, 0, 2, 1, 0, ], [0, 0, 0, 1, 1, 1, 2, 1, ], [0, 2, 1, 0, 1, 1, 1, 2, ]];const J:Array = [[0, 1, 1, 1, 2, 0, 2, 1, ], [0, 0, 1, 0, 1, 1, 1, 2, ], [0, 0, 0, 1, 1, 0, 2, 0, ], [0, 0, 0, 1, 0, 2, 1, 2, ]];const T:Array = [[0, 0, 1, 0, 1, 1, 2, 0, ], [0, 0, 0, 1, 0, 2, 1, 1, ], [0, 1, 1, 0, 1, 1, 2, 1, ], [0, 1, 1, 0, 1, 1, 1, 2, ]];const S:Array = [[0, 1, 0, 2, 1, 0, 1, 1, ], [0, 0, 1, 0, 1, 1, 2, 1, ]];const Z:Array = [[0, 0, 0, 1, 1, 1, 1, 2, ], [0, 1, 1, 0, 1, 1, 2, 0, ]];const O:Array = [[0, 0, 0, 1, 1, 0, 1, 1, ]];const PIECES:Array = [ONE, TWO, THREE_STRAIGHT, THREE_BENT, I, L, J, T, S, Z, O];const R_ONE:Array = [[0.5, 0.5,]];const R_TWO:Array = [[0.5, 1,], [1, 0.5,]];const R_THREE_STRAIGHT:Array = [[0.5, 1.5,], [1.5, 0.5,]];const R_THREE_BENT:Array = [[1, 1,]];const R_I:Array = [[2, 0.5,], [0.5, 2,]];const R_L:Array = [[1.5, 1,], [1, 1.5,]];const R_J:Array = [[1.5, 1,], [1, 1.5,]];const R_T:Array = [[1.5, 1,], [1, 1.5,]];const R_S:Array = [[1, 1.5,], [1.5, 1,]];const R_Z:Array = [[1, 1.5,], [1.5, 1,]];const R_O:Array = [[1, 1,]];const CENTERS:Array = [R_ONE, R_TWO, R_THREE_STRAIGHT, R_THREE_BENT, R_I, R_L, R_J, R_T, R_S, R_Z, R_O];const NEIGHBORS:Array = [];var narr:Array = [-1, 0, 1, 0, 0, -1, 0, 1];var pieceWindow:Sprite = new Sprite();addChild(pieceWindow);pieceWindow.x = stage.stageWidth / 2;pieceWindow.y = stage.stageHeight / 2;var pieceContainer:Sprite = new Sprite();pieceWindow.addChild(pieceContainer);pieceWindow.scaleX = pieceWindow.scaleY = 80;var bd:BitmapData = new BitmapData(6, 6, true, 0x0);pieceContainer.addChild(new Bitmap(bd));var itr:int = 0, orientation:int = 0;function update(event:Event = null):void {	orientation++;	if (orientation == 4) {		orientation = 0;		itr++;		if (itr == PIECES.length) {			itr = 0;			//trace(spitArray(NEIGHBORS));		}	}	bd.fillRect(bd.rect, 0x0);	var piece:Array = PIECES[itr];	var pieceOrientation:Array = piece[orientation % piece.length];	var center:Array = CENTERS[itr];	var centerOrientation:Array = CENTERS[itr][orientation % center.length];		var i:int;		for (i = 0; i < pieceOrientation.length; i += 2) {		bd.setPixel32(pieceOrientation[i] + 1, pieceOrientation[i + 1] + 1, 0xFFFFFFFF);	}		pieceContainer.x = -centerOrientation[0] - 1;	pieceContainer.y = -centerOrientation[1] - 1;		var neighbors:Array = (NEIGHBORS[itr] ||= []);	var neighborsOrientation:Array = (neighbors[orientation % piece.length] ||= []);	if (!neighborsOrientation.length) {		var scratch:Object = {};		var spotX:int, spotY:int;		var key:String;				for (i = 0; i < pieceOrientation.length; i += 2) {			spotX = pieceOrientation[i];			spotY = pieceOrientation[i + 1];			key = spotX + "-" + spotY;			scratch[key] = true;		}				for (i = 0; i < pieceOrientation.length; i += 2) {			spotX = pieceOrientation[i];			spotY = pieceOrientation[i + 1];			for (var j:int = 0; j < narr.length; j += 2) {				var nX:int = spotX + narr[j];				var nY:int = spotY + narr[j + 1];				key = nX + "-" + nY;				if (scratch[key]) continue;				scratch[key] = true;				neighborsOrientation.push(nX, nY);			}		}	}		for (i = 0; i < neighborsOrientation.length; i += 2) {		bd.setPixel32(neighborsOrientation[i] + 1, neighborsOrientation[i + 1] + 1, 0xFFFF0000);	}}update();var timer:Timer = new Timer(200);timer.start();timer.addEventListener(TimerEvent.TIMER, update);function spitArray(thing:*, topMost:Boolean = true):String {	if (thing is Array) {		var str:String = "[ ";		if (topMost) str += "\n";		for (var i:int = 0; i < thing.length; i++) {			str += spitArray(thing[i], false) + ", ";			if (topMost) str += "\n";		}		if (topMost) str += "\n";		str += "]";		return str;	} else {		return thing.toString();	}}