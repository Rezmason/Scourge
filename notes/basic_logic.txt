Board is an Array<UInt>

Eat update algorithm(element list)
	
	Operates only on the source vector and fresh vector
	freshest is a class property; it's relevant information
	Use stacks- first in, last out- to store slices and their IDs
	Maintain separate stacks of horizontal, vertical, diagonal down and diagonal up slices
	
	//////
	
	freshest = 1
	clean the freshness grid
	processChangesIntoSlices(element list, null)
		
	While there are slice IDs in the stacks, 
	for each stack, 
		While there are slice IDs in the stack,
			pop a slice ID off the stack
			Generate source and fresh slices for the ID
				Just a for loop, no need to go crazy
			linearEatAlgorithm(source slice, fresh slice, element list)
			For each alive head,
				If the head is in the element list,
					Kill the head
					For each element in the source vector (leave out the margins if there are any),
						If that element's is on the head's team,
							Add the element to the element list
		
			processChangesIntoSlices(element list, slice ID)
	
	function processChangesIntoSlices(element list, lastSliceID):
		For each element in the list,
			Mark the element as fresh (freshest) in the fresh vector
			Mark the element's team as the current player's team in the source vector
			This is also where the element count for teams is adjusted
			Find the IDs of the horizontal, vertical, diagonal up and diagonal down slices that contain the element
				lastSliceID is needed for this, actually
			For each slice ID,
				If the appropriate stack for that slice doesn't contain the ID and the ID isn't equal to the lastSliceID,
					Push the ID onto the stack
		element list length = 0
		freshest++
		
Valid bite start function(element)
	If the element is not on the player's team, return false
	If all the element's neighbors are either on its team or empty, return false
	Return true
	
Valid bite end function(?)
	Kind of messy, but
		you specify the bite direction with mouse grid position and then 
		limit the extent by perpendicular mouse position

Valid position function(home element, piece elements)
	You've done this before with Jeretris

So:
	When one player bites another, perform a dead test
	When a player places a piece, 
		Copy the bitmap to the vector
		pass the new elements to the eat update algorithm
		Copy the vector back to the bitmap
		and then perform a dead test

All pieces provided to players are picked from a hat. New hat per turn.

Multiplayer authentication
	Server passes each client a separate key
		Client passes key back to authenticate each user action
		
Scourge game architecture needs to be made immutable
	Right now it's basically rules operating on a single state
	Needs to accept a state and spit out another

Advanced Scourge game functions

findPlayerEdges
	Returns a list of indices that are adjacent to a player

evaluatePiece
