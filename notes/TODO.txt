GUI flowchart!

	(back)

	SPLASH
		quit (double)
		local game
			new
				- [game config]
				[game]
			load from file
		net game
			- nickname
			join/host
				- [host IP]
				propose game
					- [game config]
					[game]
				spectate game
					[game]
				join game
					[game]
				leave (double)
				[chatroom]

	GAME CONFIG
		Templates
			Basic
			Whatever
			Domination
			Whatever
		Your Favorites
		Your Recent
		Server Favorites
		Server Recent

		- [hinted, segmented]

	GAME
		forfeit (double)
		- [drag board around]
		- [clicking a node- node ID input]
		- [clicking sides of piece- piece rotation/reflection input]

		10 say who is playing
		20 say whose turn it is
		30 say what actions they may take - interactive(action)
		40 prompt:
			players
				list of who is playing (note the current player, and the players who are dead) - interactive(append to msg)
			msg (players, string)
				send a chat message to the listed players. Default is everybody
			action (name)
				1-option action: perform action of that name, goto 50
				many-option action: auto-complete includes parameter bracket
			action (name, param1, param2... paramN)
				Each param has a character limit, like [0-9]+ or [0-9a-zA-Z]+
				If the cursor is in a param, it's hilighted
					backspace clears the param
					Invalid text puts a red X at the end
				Let's see:
					forfeit (double)
					skip (double)
					drop (node, offset, rotation, reflection)
					swap/pickPiece
					bite (node, bitNodes)
			stats
				details about player statistics - body size, bite size, etc

		50 perform action:
			use game annotations to narrate state changes
		60 if game's over, declare winner, else goto 20




TextView

	Scale text field up
	get bounds of m char
	Convert whole font to Array<BitmapData>

	PrettyChar
		Centered billboard
		scale tween
		color transform
			tween
		position tween


	Interprets commands
	Translates non-text input into text input
		Clicking a node blinks its ID into the text input
	"Bracket" format
		bite [param 1] [param 2] [param 3]
		interpreter converts this into bite 102 when entered
	Translates all other game events into human readable output

	¤ ¤ ¤ ¤ ¤ ¤ ¤ ¤  • • •
	¤             ¤  •
	¤   + + +{+}  ¤
	¤   + Ω ¬ +   ¤
	¤   + ¬ ¬ +   ¤
	¤  [+]+ +  ◊ ¤
	¤             ¤
	¤ ¤ ¤ ¤ ¤ ¤ ¤ ¤

	¬  > Ω Î @ Δ ◊ ¤ _ { } [ ] • ø

Finalize ROPES classes

Save states and save testing
	If the code for a rule changes, the games that used earlier versions of that rule are kind of botched
		How do other games handle this?

TestPlayer
HumanPlayer
RemotePlayer
MachinePlayer (local)

Checksums

Implement noneuclidean walking and running

	add() function should create heading data
	walk() and run() functions should operate on heading data
	heading data should be available after a walk
	Turtle?

Rewrite the eat rule recursion config property to be an Int of depth
	Rather than being recursive or not recursive at all, let the user specify how many recursive steps to take

And then SPEED EVERYTHING UP
	Use timing output to find the bottlenecks
	Lambda.has is expensive - switch to using tables of ids
	Store useful information, like edges, distance and connectedness values
		Rules that take advantage of these values would expand a graph from an affected square
		Just make sure to update this information when it changes
	Take advantage of linked lists for storing sets of nodes
	Also, haxe.List might be better than Array in some situations

ExternalPlayer
Turn durations
	Special aspect I suppose

GameView

Coarse evaluation
	Number of nodes (filled and enclosed)
	Attribute count (bites and swaps) times attribute range
	Percentage of nodes that are outer edges!
	Number of nodes


A.I. thoughts
	Shannon Type B
		Identify and prune the moves that are just fucking stupid
			Sort by coarse evaluation
			Only consider the top N possibilities
	Alpha-Beta pruning
		Is this even possible?
	Fretting
		aka "Permanent brain"
		Players technically aren't limited to their turn in order to evaluate the board


Later

	Rule-Option Paradigm Entity System
		Create tic tac toe example for ROPES
		Create readme and license files for ROPES
		Migrate tests to tic tac toe
		Move ROPES to a haxe lib

	Maybe turn nodes into aspects
		Store their neighbors on them

	Level Editing
		Just a bunch of rules, aha

	Infinite board
		Expand board when placing a piece
		Tough?

	Destination goal rule
	Allow goal rules to apply to specific players


New UI

	Switch back to MISO font
	Data indicators

	Icons
	Color Transform

	Game board

		Slime
			Hoo boy

		Piece
			Piece Panning
		Bites
			Bite panning
		Bite tracks

		Player info
			hover for mouse
			Press for touch

	Touch mode
		Swipe gesture instead of click for auto expand
		Press instead of hover for hint
	Mouse mode
		Board doesn't zoom for chop
		No swiping at all?

Texture synthesis
	Dots
	Stripes
	Put them on an environmental map
	Use a shader to map the texture onto a blob! :-)

http://code.google.com/p/hxgk/

Game starts as a primer
	History of game states and commands allows player to better understand how games progress

Contact Jason Whong?
