About page
Settings page
Game config page

Wait. Haxe 3 supports inline variable initialization?!
    RABLFLABL

Board
    Change ripple behavior
    Figure out how to do "pain"-related things
    Pool objects

Flash 12 support
    Context3DBufferUsage
    Context3D::createVertexBuffer

AGAL2
    Recompile GLSL2AGAL worker
        AGAL_VERSION should be 2
        Recompile latest AGALMiniAssembler into SWC
        Recompile latest GLSL2AGAL SWC

Human players, GUISystem
    Implement abstract commands
    THEN figure out how to connect them to the console
PlayerSystem needs a queue
    IntMap, actually.
    Store all float and move messages whose turns are late
    Iterate through them once they're reached
Improve history
    Make the diffs go backwards
    And force a full commit occasionally
Refactor the console stuff- within reason
    It's a mess
Support output hints

Code review?

Music box inspired microfluidic lab controller:
https://www.youtube.com/watch?v=kNQToOEFNmY

hashed turn based network games:
http://vimeo.com/87682214

Move the logic into a Worker
    Worker tests are failing in-game on Flash and HTML5 targets

Get referee to handle situations where a player takes too long to sync or move
    "Player has been replaced with a bot of Level N"

Timing, continued
    Shot clock
        Animation time should be calculated on the server and added to the shot clock
    Server timeout

Depth of field in frag shader?
    Already got the vZ and deriv

Implement noneuclidean walking and running
    add() function should create heading data
    walk() and run() functions should operate on heading data
    heading data should be available after a walk
    Turtle?

Scroll indicator in UIBody

It'd be fun to make a branch that renders glyphs as points

Finalize ROPES classes

Save states and save testing
    If the code for a rule changes, the games that used earlier versions of that rule are kind of botched
    How do other games handle this?
    http://www.altdevblogaday.com/2011/07/09/synchronous-rts-engines-and-a-tale-of-desyncs

GDC articles
    http://www.gamasutra.com/view/news/189266/The_technique_LucasArts_used_to_design_its_classic_adventure_games.php
    http://www.gamasutra.com/view/news/189251/7_practical_tips_for_making_a_moral_game.php
    http://www.gamasutra.com/view/news/189345/How_to_use_live_events_to_promote_your_game.php
    http://www.gamasutra.com/view/news/189353/Designing_without_a_pitch__An_FTL_postmortem.php

Other stuff
    http://www.nationalgeographic.com/china-caves/

Hey, this game is a Roguelike!
    Figure out what solutions they have to UI challenges

Make renderer cross-platform (as in, test it on several devices)
    Oh boy...

Checksums

Rewrite the eat rule recursion config property to be an Int of depth
    Rather than being recursive or not recursive at all, let the user specify how many recursive steps to take

And then SPEED EVERYTHING UP
    Use timing output to find the bottlenecks
    Lambda.has is expensive - switch to using tables of ids
    Store useful information, like edges, distance and connectedness values
    Rules that take advantage of these values would expand a graph from an affected square
    Just make sure to update this information when it changes
    Take advantage of linked lists for storing sets of nodes
    Also, haxe.List might be better than Array in some situations

ExternalPlayer

Later

    Package the Rule Oriented Paradigm Entity System so other people can use it

        'Tie down your game design'
        'Constraints can be a good thing'

        Create tic tac toe example for ROPES
        Create readme and license files for ROPES
        Migrate tests to tic tac toe
        Move ROPES to a haxe lib

    Level Editing - Just a bunch of demiurgic rules

    Lazy board - only represents nodes near players, expands when necessary

    Destination goal rule
    Allow goal rules to apply to specific players

Metaballs should be simpler now
    Particles are added-together blurcles
    Screen-size quad gets textured and shaded in another pass
    Third pass renders the "real geom" and then overlays the metaballs on top

Alternative: 2D metaballs in displacement map
    Vertex shader:
        - combines displacement map with normal map to increase height (with a curve)
        - passes info to fragment shader; transition from surface to slime might be different for texture than for geom

Texture synthesis
    Dots
    Stripes
    Put them on an environmental map
    Use a shader to map the texture onto a blob! :-)

Contact Jason Whong?

http://twitter.com/CPriestman/status/422042402484801537
    When announcing a game:
    Game name
    Website
    Images
    Trailer
    Contact details
    Description
    Platforms
    Studio name
    Estimated release date
