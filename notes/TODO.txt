Lime conversion
Colors should be Vec3, not Int
    Lab
    Interpreter
    GLSystem.clear
        So Vec3 should be a GLType
        Maybe rename it so it's not like Vector4


Loupe
    
    Okay, here's what's up
        show loupe
            LoupeDemo has a loupe
            Arrow keys change loupe's size
        Has a border box
        Has a UIMediator
        Floats over *everything*
    The Loupe *snaps around* glyphs
        Some method takes a Body and an array of IDs, transforms them into LoupeSpace, and *clones* them in the Loupe
    The UIElement grows to surround these clones
    And the border box grows to surround the UIElement
    That's what's up.

Fix bitmap texture; it's obviously broken in html5 ScourgeLab
    [Warning] WebGL: drawElements: texture bound to texture unit 0 is not renderable. It maybe non-power-of-2 and have incompatible texture filtering or is not 'texture complete', or it is a float/half-float type with linear filtering and without the relevant float/half-float linear extension enabled. (webgl-debug.js, line 232)
    [Log] WebGL error INVALID_ENUM in drawElements(TRIANGLES, 6, UNSIGNED_SHORT, 0) (webgl-debug.js, line 15)
    [Log] WebGL error INVALID_ENUM in bindBuffer(ARRAY_BUFFER, [object WebGLBuffer]) (webgl-debug.js, line 15)

    Add it as 'loupe' to injector
    Board interaction signal should drive LoupeSwipeSystem
        LoupeSwipeSystem converts dx and dy into cardinal motion
            dx and dy also affect brightness of cardinal indicators of loupe
            A cardinal motion interpretation *resets* the swipe origin
            A cardinal motion also changes the "focus" of the loupe
                Focus of loupe is NOT its center; focus is the node on the piece that traverses
                The focus can change, if the user wants, by touching a node in the loupe
                The loupe is always centered by AVERAGING the positions of the piece nodes
    Then, get the Loupe to display the current piece
        Swapping should swap the piece
    Then, give it buttons

Where's this all going?
    SwipeView 2.0
        Round rectangles showing information
        You pull them out, they expand to loupes
            One for piece moves
            One for bite moves
            One for player stats
            One for DNA?

Try replacing Reflect-on-Dynamic with DynamicAccess

Make the bots "use" the SwipeView

There could be WAY more symbols than spaces, and it might look nicer

We can support more Bodies by making IDs dynamic
    Engine, render methods create them from display list

Settings page
Game config page

Some Haxe stuff
    https://github.com/DanielUranga/openfl-harfbuzz
    https://github.com/larsiusprime/crashdumper
    https://github.com/Justinfront/hxDaedalus

Upgrade to latest OpenFL

Flash 12 support
    Context3DBufferUsage
    Context3D::createVertexBuffer

Smarten up the AI
    Prune moves
    Weigh moves
        Negative weights:
            "vulnerability"– susceptability to SOME attack
            "threat"– susceptability to EXISTING attack

Figure out how to do "pain"-related things
    BoardMeasurer updates node distances
    Then RulePresenters get a chance to respond to moves; they get to work with the whole board
Create ripple behavior

Wrap shaders in a soft fuzzy blanket, so they don't fucking piss themselves
    GLSL2AGAL output includes stuff that helps validate parameter setting and so on
    Skim GLSL shaders for this data, too
    We may also get texture indices from here, too

    Flash test - the commented out example output in the metaball post shader should just plain work
    GLSL test - texture indices should no longer be necessary

Separate UIElement from UIScene
    UIScene is a Scene subclass with a UIElement in it, which it resizes to fit itself

Add Metaballs to the game

AGAL2
    Recompile GLSL2AGAL worker
        AGAL_VERSION should be 2
        Recompile latest AGALMiniAssembler into SWC
        Recompile latest GLSL2AGAL SWC

Human players, GUISystem
    Implement abstract commands
    THEN figure out how to connect them to the console
PlayerSystem needs a queue
    IntMap, actually.
    Store all float and move messages whose turns are late
    Iterate through them once they're reached
Improve history
    Make the diffs go backwards
    And force a full commit occasionally
Refactor the console stuff- within reason
    It's a mess
Support output hints

Code review?

About page text

Music box inspired microfluidic lab controller:
https://www.youtube.com/watch?v=kNQToOEFNmY

hashed turn based network games:
http://florincoin.org/game

Move the logic into a Worker
    Worker tests are failing in-game on Flash and HTML5 targets

Get referee to handle situations where a player takes too long to sync or move
    "Player has been replaced with a bot of Level N"

Timing, continued
    Shot clock
        Animation time should be calculated on the server and added to the shot clock
    Server timeout

Depth of field in frag shader?
    Already got the vZ and deriv

Implement noneuclidean walking and running
    add() function should create heading data
    walk() and run() functions should operate on heading data
    heading data should be available after a walk
    Turtle?

It'd be fun to make a branch that renders glyphs as points

Finalize Praxis classes

Save states and save testing
    If the code for a rule changes, the games that used earlier versions of that rule are kind of botched
    How do other games handle this?
    http://www.altdevblogaday.com/2011/07/09/synchronous-rts-engines-and-a-tale-of-desyncs

GDC articles
    http://www.gamasutra.com/view/news/189266/The_technique_LucasArts_used_to_design_its_classic_adventure_games.php
    http://www.gamasutra.com/view/news/189251/7_practical_tips_for_making_a_moral_game.php
    http://www.gamasutra.com/view/news/189345/How_to_use_live_events_to_promote_your_game.php
    http://www.gamasutra.com/view/news/189353/Designing_without_a_pitch__An_FTL_postmortem.php

Other stuff
    http://www.nationalgeographic.com/china-caves/

Hey, this game is a Roguelike!
    Figure out what solutions they have to UI challenges

Make renderer cross-platform (as in, test it on several devices)
    Oh boy...

Checksums

Rewrite the eat rule recursion config property to be an Int of depth
    Rather than being recursive or not recursive at all, let the user specify how many recursive steps to take

And then SPEED EVERYTHING UP
    Use timing output to find the bottlenecks
    Lambda.has is expensive - switch to using tables of ids
    Store useful information, like edges, distance and connectedness values
    Rules that take advantage of these values would expand a graph from an affected square
    Just make sure to update this information when it changes
    Take advantage of linked lists for storing sets of nodes
    Also, haxe.List might be better than Array in some situations

ExternalPlayer

Later

    Package Praxis so other people can use it
        Create tic tac toe example for Praxis
        Write munit tests for tic tac toe project
        Create readme and license files for Praxis
        Move Praxis to a haxe lib

    Level Editing - Just a bunch of demiurgic rules

    Lazy board - only represents nodes near players, expands when necessary

    Destination goal rule
    Allow goal rules to apply to specific players

Texture synthesis
    Dots
    Stripes
    Put them on an environmental map
    Use a shader to map the texture onto a blob! :-)

Contact Jason Whong
Contact "OpenFungus" group

http://twitter.com/CPriestman/status/422042402484801537
    When announcing a game:
    Game name
    Website
    Images
    Trailer
    Contact details
    Description
    Platforms
    Studio name
    Estimated release date
