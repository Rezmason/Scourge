New architecture
	Game
		State: just a Grid<ICell>, a List<IStat>, and a pointer to the IStat of the current IPlayer
			Also the time limit
		IStateFactory: creates states of different sorts
			(does NOT create players of different sorts)
			InitialStateFactory
			LevelStateFactory
			TestStateFactory
		IPlayer: an object that picks an optimal State from a set of States
			The initial state is also provided
			??? How to evaluate for an optimal state if the rules aren't in stone?
			??? How does the View portray the set of states?
				For the View's sake, the set of states must be organized by cause
			MachinePlayer
			HumanPlayer
			NetworkPlayer
			TestPlayer
		IRule: a generator whose input and output are a State and a set of States that can be reached from that State




Prevent overlapping interaction

The game needs to be separated from the rules
	Computer opponents use the rules to simulate the game
	The game frames the rules and the history of states
The rules need to be testable
	Test framework creates states, performs actions on those states and compares the outcomes

New UI

	Switch back to MISO font
	Data indicators

	Icons
	Color Transform

	Game board

		Slime
			Hoo boy

		Piece
			Piece Panning
		Bites
			Bite panning
		Bite tracks

		Player info
			hover for mouse
			Press for touch

	Touch mode
		Swipe gesture instead of click for auto expand
		Press instead of hover for hint
	Mouse mode
		Board doesn't zoom for chop
		No swiping at all?

NME

Texture synthesis
	Dots
	Stripes

Computer opponents
	Create pruning functions

http://code.google.com/p/hxgk/

Game starts as a primer
	History of game states and commands allows player to better understand how games progress

Contact Jason Whong?
