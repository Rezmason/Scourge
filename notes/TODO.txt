Simplify the scene graph tremendously
    ONE ROOT DAMN IT
    One scene; integrate scene and scene graph
    All bodies are in a Map, forever
    All hotspots are in a Map, forever
        owned by the MouseSystem, updated by engine in response to signals
    No camera
        Sizing logic doesn't belong in a scene graph

    So how do I get there?
        1. Get rid of focus rects (DONE)
        2. Get rid of UIElement dependencies (DONE)
        3. Get everything to work as children of one scene (DONE)
        4. Merge scene and scene graph (DONE)
        5. Convert stage size to inches (DONE)
        6. Hoist Container from Body (DONE)
        7. Make SceneGraph into Stage, extends Container (DONE)
        8. Create LetterBox from Container
        9. Start letterboxing things
        ...
        N-3. Make hotspots
        N-2. Make a TextObject UIElement replacement
        N-1. Bring back the console

UI basis

    What information is needed?
        Board
        Current player
        Current action
        Player bite size
        Player num bites
        Player num swaps

    What actions are possible?
        Forfeit
        Skip
        Place piece
        Bite
        Swap piece

    Nice to haves:
        Room for any number of actions
        Room for log

    PHONE VIEW
        Orientation independent
        Overview info appears
            During turn
                Scrollable, one square entry for each player
                    Player head
                    Number of bites (in diamond icons)
                    Number of swaps (in shuffle icons)
                    Bite Size
                Current player has icon next to name
                    If there's a timer, countdown appears next to icon
            During board changes
                Each kind of event shows relevant info
                    Who just died and how
                    Changes in size
        Icons for actions appear in list that scrolls perpendicular to board
            Bite, Drop, Swap, Forfeit, Skip
        Pressing action button changes board to reflect action
            Bite: legal bite init locations
            Drop: total legal drop location silhouette
        Pressed action button replaces scrolling list with action specific view
            Action button "becomes" back button
            Drop: Confirm drop, rotate, flip
            Bite: Confirm bite, add bite, subtract bite
            Swap: Commit Swap, Current Piece, Num Swaps Remaining
            Skip: Confirm Skip
            Forfeit: Confirm Forfeit
    
    Break MoveMediator into appropriate pieces

And if you need more symbols, just, fuckin', go add a monochrome emoji font, man.

Create puppet

Settings page
Game config page

Compress the HTFs

Some Haxe stuff
    https://github.com/DanielUranga/openfl-harfbuzz
    https://github.com/larsiusprime/crashdumper
    https://github.com/Justinfront/hxDaedalus

Minified JS
    -D js_flatten # flatten package namespaces to single variables
    -dce full # remove all unused code
        Problematic; removes constructors that are not explicitly called
            @:keep and @:keepSub
    --no-traces # remove all traces

Try putting in @:generic where it makes a difference

Smarten up the AI
    Prune moves
    Weigh moves
        Negative weights:
            "vulnerability"– susceptability to SOME attack
            "threat"– susceptability to EXISTING attack

Figure out how to do "pain"-related things
    BoardMeasurer updates node distances
    Then RulePresenters get a chance to respond to moves; they get to work with the whole board
Create ripple behavior

Separate UIElement from UIScene
    UIScene is a Scene subclass with a UIElement in it, which it resizes to fit itself

Add Metaballs to the game

Human players, GUISystem
    Implement abstract commands
    THEN figure out how to connect them to the console
PlayerSystem needs a queue
    IntMap, actually.
    Store all float and move messages whose turns are late
    Iterate through them once they're reached
Improve history
    Make the diffs go backwards
    And force a full commit occasionally
Refactor the console stuff- within reason
    It's a mess
Support output hints

Code review?

About page text

Music box inspired microfluidic lab controller:
https://www.youtube.com/watch?v=kNQToOEFNmY

hashed turn based network games:
http://florincoin.org/game

Move the logic into a Worker
    Worker tests are failing in-game on Flash and HTML5 targets

Get referee to handle situations where a player takes too long to sync or move
    "Player has been replaced with a bot of Level N"

Timing, continued
    Shot clock
        Animation time should be calculated on the server and added to the shot clock
    Server timeout

Depth of field in frag shader?
    Already got the vZ and deriv

Implement noneuclidean walking and running
    add() function should create heading data
    walk() and run() functions should operate on heading data
    heading data should be available after a walk
    Turtle?

Finalize Praxis classes

Save states and save testing
    If the code for a rule changes, the games that used earlier versions of that rule are kind of botched
    How do other games handle this?
    http://www.altdevblogaday.com/2011/07/09/synchronous-rts-engines-and-a-tale-of-desyncs

GDC articles
    http://www.gamasutra.com/view/news/189266/The_technique_LucasArts_used_to_design_its_classic_adventure_games.php
    http://www.gamasutra.com/view/news/189251/7_practical_tips_for_making_a_moral_game.php
    http://www.gamasutra.com/view/news/189345/How_to_use_live_events_to_promote_your_game.php
    http://www.gamasutra.com/view/news/189353/Designing_without_a_pitch__An_FTL_postmortem.php

Other stuff
    http://www.nationalgeographic.com/china-caves/

Hey, this game is a Roguelike!
    Figure out what solutions they have to UI challenges

Make renderer cross-platform (as in, test it on several devices)
    Oh boy...

Checksums

Rewrite the eat rule recursion config property to be an Int of depth
    Rather than being recursive or not recursive at all, let the user specify how many recursive steps to take

And then SPEED EVERYTHING UP
    Use timing output to find the bottlenecks
    Lambda.has is expensive - switch to using tables of ids
    Store useful information, like edges, distance and connectedness values
    Rules that take advantage of these values would expand a graph from an affected square
    Just make sure to update this information when it changes
    Take advantage of linked lists for storing sets of nodes
    Also, haxe.List might be better than Array in some situations

ExternalPlayer

Later

    Package Praxis so other people can use it
        Create tic tac toe example for Praxis
        Write munit tests for tic tac toe project
        Create readme and license files for Praxis
        Move Praxis to a haxe lib

    Level Editing - Just a bunch of demiurgic rules

    Lazy board - only represents nodes near players, expands when necessary

    Destination goal rule
    Allow goal rules to apply to specific players

Texture synthesis
    Dots
    Stripes
    Put them on an environmental map
    Use a shader to map the texture onto a blob! :-)

Contact Jason Whong
Contact "OpenFungus" group

http://twitter.com/CPriestman/status/422042402484801537
    When announcing a game:
    Game name
    Website
    Images
    Trailer
    Contact details
    Description
    Platforms
    Studio name
    Estimated release date
