Switch to vector from array

The sooner I work with char entities, the better
    Make char entities
        They should really only contain arrays
        using CharUtils will grant them more useful getters and setters
    Write their contents to vectors
        store their vertex address
        store their index address
        store their buffer index
    Upload the vectors to the buffers

    To swap two characters,
        copy and swap their index addresses and buffer indices in local variables
        Write their data to the new addresses
        Give them their new addresses

    Keep track of the min and max changed indices when you update a buffer
        Only upload those portions from the vectors

    CharEntity
        renderIndex: Int
        hidden: Bool
        interactiveIndex: Int
        position: {x, y, z}
        scale: Float
        color: {r, g, b}
        charCode: Int
        videoInversion: Float
        vanishingPointIndex: Int


Give projection matrix to group
    Keep a default one around

Scissor rect for board
    Per object, really
    We can do more complicated stuff later

Animate things!
    Per frame
    Change something every five seconds

Interaction update
    Render the scene ONCE each time interaction changes
        On mouse/finger up after a drag
        On button click/tap
        On first mouse move after a keystroke
    Only color and draw the hoverable/clickable objects, of course
        Create a large quad object for the board's draggable hit area

Spinning globe object

What are the characters used for?
    3D views - board, polyominoes
        Node
            Head
            Body
            Cavity
            Bite regions

        Hover state
            "bracketed" and brighter

        Click state
            "telegraphing" ID animation
                Char change
                Scale change
                Characters in ID of string are "dialed" onscreen in the char
                Brackets stay in place until done

    Text view
        All text is stored in rows and columns

        Plain text
            Plain or colored, nothing special
        "Active text"
            Brighter, z up
        Input
            Brackets
                Active bracket is z-up
            Prompt blinks
            Auto-fill text is gray
        Button element
            Same color, inversion, z and perspective projection
            vanishing point is in middle of button
        "Button states"
            Up
                normal
            Over
                white, z up
            Down
                normal color, z down
        If active text, input, or button elements doesn't fit on screen,
            Flatten plain text
            Swap non-plain text
            Tween text up

    2D polyomino view
        Buttons for manipulating rotation & reflection
        Buttons for choosable piece shortcuts
        Plain text for available piece shortcuts
        Gray text for unavailable piece shortcuts

    Buttons can "telegraph" too, changing z instead of scale


Interprets commands
Translates non-text input into text input
    Clicking a node blinks its ID into the text input
"Bracket" format
    bite [param 1] [param 2] [param 3]
    interpreter converts this into bite 102 when entered
Translates all other game events into human readable output
